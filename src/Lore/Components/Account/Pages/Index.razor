@page "/Account"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Lore.Data
@using System.Text.Json
@using Tavenem.Wiki

@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore

@layout ManageLayout

<PageTitle>Account</PageTitle>

<h3>Account</h3>
<StatusMessage />
@if (user is null)
{
    return;
}

<div class="container-sm align-items-stretch">
    <h4>Welcome, @(username ?? $"User {user.Id}")</h4>

    <a class="btn" href="/Account/SignOut">Sign out</a>

    @if (user.IsWikiAdmin)
    {
        <h5 class="mt-3">Invite a new Lore user</h5>
        <EditForm Model="Input" FormName="invite-user" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="danger" role="alert" />
            <TextInput @bind-Value="@Input.Email"
                       InputType="InputType.Email"
                       Label="Email"
                       Placeholder="someone@example.com"
                       Required="true">
                <div slot="helpers">
                    <ValidationMessage For="() => Input.Email" class="danger" />
                </div>
            </TextInput>
            <button type="submit" class="w-100 btn primary">Send invitation</button>
        </EditForm>
        <h5 class="mt-3">Restore an archive</h5>
        <form method="post" enctype="multipart/form-data" @formname="restore-archive">
            <input type="file" name="file" />
            <button type="submit" class="w-100 btn primary">Upload archive</button>
            <AntiforgeryToken />
        </form>
    }
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private string? statusMessage;
    private ApplicationUser? user;
    private string? username;

    [SupplyParameterFromForm(FormName = "restore-archive")]
    private IFormFile? File { get; set; }

    [CascadingParameter, System.Diagnostics.CodeAnalysis.NotNull]
    private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm(FormName = "invite-user")]
    private InputModel Input { get; set; } = new();

    private string? Message
    {
        get
        {
            if (identityErrors is null)
            {
                return statusMessage;
            }
            return $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";
        }
    }

    [Inject, System.Diagnostics.CodeAnalysis.NotNull]
    private Tavenem.Wiki.Blazor.Client.Services.ClientWikiDataService? WikiDataService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User);
        if (user is null)
        {
            RedirectManager.RedirectTo("/Account/Login", new() { ["returnUrl"] = NavigationManager.Uri });
            return;
        }
        username = await UserManager.GetUserNameAsync(user);

        if (File is not null)
        {
            await using var stream = File.OpenReadStream();
            var archive = await JsonSerializer.DeserializeAsync(stream, WikiArchiveJsonSerializerContext.Default.Archive);
            if (archive is not null)
            {
                await WikiDataService.RestoreArchiveAsync(archive);
            }
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private async Task OnValidSubmitAsync()
    {
        if (string.IsNullOrEmpty(Input.Email))
        {
            RedirectManager.RedirectToCurrentPage();
            return;
        }

        var existingUser = await UserManager.FindByEmailAsync(Input.Email);
        if (existingUser is null)
        {
            var newUser = CreateUser();

            await UserStore.SetUserNameAsync(newUser, Input.Email, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(newUser, Input.Email, CancellationToken.None);
            var result = await UserManager.CreateAsync(newUser);

            if (!result.Succeeded)
            {
                identityErrors = result.Errors;
                return;
            }

            Logger.LogInformation("Admin created an account for a new user with no password.");

            var userId = await UserManager.GetUserIdAsync(newUser);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(newUser);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmNewEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

            await EmailSender.SendConfirmationLinkAsync(newUser, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

            RedirectManager.RedirectToCurrentPageWithStatus("Invitation sent", HttpContext);
        }
        else
        {
            if (existingUser.EmailConfirmed && await UserManager.HasPasswordAsync(existingUser))
            {
                statusMessage = "A user with this email already exists.";
                return;
            }

            var userId = await UserManager.GetUserIdAsync(existingUser);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(existingUser);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmNewEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

            await EmailSender.SendConfirmationLinkAsync(existingUser, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

            RedirectManager.RedirectToCurrentPageWithStatus("Invitation sent", HttpContext);
        }
    }

    private sealed class InputModel
    {
        public string? Email { get; set; }
    }
}
